// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertCode = `-- name: InsertCode :one
INSERT INTO "export_codes"("code") VALUES($1) RETURNING id, code
`

func (q *Queries) InsertCode(ctx context.Context, code string) (ExportCode, error) {
	row := q.db.QueryRow(ctx, insertCode, code)
	var i ExportCode
	err := row.Scan(&i.ID, &i.Code)
	return i, err
}

const insertExportTabCode = `-- name: InsertExportTabCode :exec
INSERT INTO "export_tabs"("tab_id", "code_id") VALUES($1, $2)
`

type InsertExportTabCodeParams struct {
	TabID  int32
	CodeID int32
}

func (q *Queries) InsertExportTabCode(ctx context.Context, arg InsertExportTabCodeParams) error {
	_, err := q.db.Exec(ctx, insertExportTabCode, arg.TabID, arg.CodeID)
	return err
}

const insertTab = `-- name: InsertTab :one
INSERT INTO "tabs"("name","favicon_url","url") VALUES($1,$2,$3) RETURNING id, name, favicon_url, url, created_at
`

type InsertTabParams struct {
	Name       string
	FaviconUrl string
	Url        string
}

func (q *Queries) InsertTab(ctx context.Context, arg InsertTabParams) (Tab, error) {
	row := q.db.QueryRow(ctx, insertTab, arg.Name, arg.FaviconUrl, arg.Url)
	var i Tab
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.FaviconUrl,
		&i.Url,
		&i.CreatedAt,
	)
	return i, err
}

const selectCode = `-- name: SelectCode :one
SELECT id, code FROM "export_codes" WHERE "export_codes".code = $1
`

func (q *Queries) SelectCode(ctx context.Context, code string) (ExportCode, error) {
	row := q.db.QueryRow(ctx, selectCode, code)
	var i ExportCode
	err := row.Scan(&i.ID, &i.Code)
	return i, err
}

const selectExportedTabs = `-- name: SelectExportedTabs :many
SELECT id, name, favicon_url, url, created_at, tab_id, code_id FROM "tabs" INNER JOIN "export_tabs" ON "tabs".id = "export_tabs".tab_id WHERE "export_tabs".code_id = $1
`

type SelectExportedTabsRow struct {
	ID         int32
	Name       string
	FaviconUrl string
	Url        string
	CreatedAt  pgtype.Timestamp
	TabID      int32
	CodeID     int32
}

func (q *Queries) SelectExportedTabs(ctx context.Context, codeID int32) ([]SelectExportedTabsRow, error) {
	rows, err := q.db.Query(ctx, selectExportedTabs, codeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectExportedTabsRow
	for rows.Next() {
		var i SelectExportedTabsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.FaviconUrl,
			&i.Url,
			&i.CreatedAt,
			&i.TabID,
			&i.CodeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
